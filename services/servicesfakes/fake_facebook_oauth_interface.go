// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"golang-oauth/services"
	"sync"
)

type FakeFacebookOAuthInterface struct {
	CallbackFacebookStub        func(string) (string, error)
	callbackFacebookMutex       sync.RWMutex
	callbackFacebookArgsForCall []struct {
		arg1 string
	}
	callbackFacebookReturns struct {
		result1 string
		result2 error
	}
	callbackFacebookReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	HandleFacebookLoginStub        func() (string, error)
	handleFacebookLoginMutex       sync.RWMutex
	handleFacebookLoginArgsForCall []struct {
	}
	handleFacebookLoginReturns struct {
		result1 string
		result2 error
	}
	handleFacebookLoginReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFacebookOAuthInterface) CallbackFacebook(arg1 string) (string, error) {
	fake.callbackFacebookMutex.Lock()
	ret, specificReturn := fake.callbackFacebookReturnsOnCall[len(fake.callbackFacebookArgsForCall)]
	fake.callbackFacebookArgsForCall = append(fake.callbackFacebookArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CallbackFacebookStub
	fakeReturns := fake.callbackFacebookReturns
	fake.recordInvocation("CallbackFacebook", []interface{}{arg1})
	fake.callbackFacebookMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFacebookOAuthInterface) CallbackFacebookCallCount() int {
	fake.callbackFacebookMutex.RLock()
	defer fake.callbackFacebookMutex.RUnlock()
	return len(fake.callbackFacebookArgsForCall)
}

func (fake *FakeFacebookOAuthInterface) CallbackFacebookCalls(stub func(string) (string, error)) {
	fake.callbackFacebookMutex.Lock()
	defer fake.callbackFacebookMutex.Unlock()
	fake.CallbackFacebookStub = stub
}

func (fake *FakeFacebookOAuthInterface) CallbackFacebookArgsForCall(i int) string {
	fake.callbackFacebookMutex.RLock()
	defer fake.callbackFacebookMutex.RUnlock()
	argsForCall := fake.callbackFacebookArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFacebookOAuthInterface) CallbackFacebookReturns(result1 string, result2 error) {
	fake.callbackFacebookMutex.Lock()
	defer fake.callbackFacebookMutex.Unlock()
	fake.CallbackFacebookStub = nil
	fake.callbackFacebookReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFacebookOAuthInterface) CallbackFacebookReturnsOnCall(i int, result1 string, result2 error) {
	fake.callbackFacebookMutex.Lock()
	defer fake.callbackFacebookMutex.Unlock()
	fake.CallbackFacebookStub = nil
	if fake.callbackFacebookReturnsOnCall == nil {
		fake.callbackFacebookReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.callbackFacebookReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFacebookOAuthInterface) HandleFacebookLogin() (string, error) {
	fake.handleFacebookLoginMutex.Lock()
	ret, specificReturn := fake.handleFacebookLoginReturnsOnCall[len(fake.handleFacebookLoginArgsForCall)]
	fake.handleFacebookLoginArgsForCall = append(fake.handleFacebookLoginArgsForCall, struct {
	}{})
	stub := fake.HandleFacebookLoginStub
	fakeReturns := fake.handleFacebookLoginReturns
	fake.recordInvocation("HandleFacebookLogin", []interface{}{})
	fake.handleFacebookLoginMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFacebookOAuthInterface) HandleFacebookLoginCallCount() int {
	fake.handleFacebookLoginMutex.RLock()
	defer fake.handleFacebookLoginMutex.RUnlock()
	return len(fake.handleFacebookLoginArgsForCall)
}

func (fake *FakeFacebookOAuthInterface) HandleFacebookLoginCalls(stub func() (string, error)) {
	fake.handleFacebookLoginMutex.Lock()
	defer fake.handleFacebookLoginMutex.Unlock()
	fake.HandleFacebookLoginStub = stub
}

func (fake *FakeFacebookOAuthInterface) HandleFacebookLoginReturns(result1 string, result2 error) {
	fake.handleFacebookLoginMutex.Lock()
	defer fake.handleFacebookLoginMutex.Unlock()
	fake.HandleFacebookLoginStub = nil
	fake.handleFacebookLoginReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFacebookOAuthInterface) HandleFacebookLoginReturnsOnCall(i int, result1 string, result2 error) {
	fake.handleFacebookLoginMutex.Lock()
	defer fake.handleFacebookLoginMutex.Unlock()
	fake.HandleFacebookLoginStub = nil
	if fake.handleFacebookLoginReturnsOnCall == nil {
		fake.handleFacebookLoginReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.handleFacebookLoginReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFacebookOAuthInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.callbackFacebookMutex.RLock()
	defer fake.callbackFacebookMutex.RUnlock()
	fake.handleFacebookLoginMutex.RLock()
	defer fake.handleFacebookLoginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFacebookOAuthInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.FacebookOAuthInterface = new(FakeFacebookOAuthInterface)
